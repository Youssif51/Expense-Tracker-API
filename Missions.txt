اليوم الأول: التحضير والتخطيط
1. فهم المتطلبات:
راجع كل تفاصيل المشروع:
الهدف.
الوظائف الأساسية (إضافة، تعديل، حذف المصاريف).
الفلاتر المطلوبة (الأسبوع، الشهر،...).
المصادقة باستخدام JWT.
2. إنشاء البيئة الأولية:
فكّر في الخطوات دي:
جهّز بيئة العمل (Node.js + npm/yarn).
قرّر قاعدة البيانات اللي هتشتغل عليها (PostgreSQL أو MongoDB).
لو هتستخدم PostgreSQL، قرر الـ ORM (زي Prisma أو Sequelize).
3. هيكلة المشروع:
فكر في هيكل المشروع:
/models: ملفات الـ data models.
/routes: ملفات الـ API endpoints.
/controllers: المنطق الأساسي للتعامل مع البيانات.
/middlewares: المصادقة أو أي معالجات وسيطة.
server.js: ملف التشغيل الأساسي.
هدف اليوم:
تثبيت كل التبعية (dependencies) اللي هتحتاجها:
Express.js.
قاعدة البيانات اللي اخترتها (زي pg لو PostgreSQL).
ORM اللي قررت تشتغل عليه.
dotenv لإدارة متغيرات البيئة.
bcrypt و jsonwebtoken للتعامل مع التوثيق.
تفكير اليوم:
اسأل نفسك:
هل عندي فهم واضح للهيكل؟
إيه المشاكل اللي ممكن تقابلني في دمج JWT؟
هل فيه حاجة ناقصة من المتطلبات؟



اليوم الثاني: تصميم الـ Data Model
1. تصميم الجداول:
فكّر في العلاقات بين الجداول:
جدول المستخدمين (Users): يحتوي على id، name، email، و password.
جدول المصاريف (Expenses): يحتوي على id، amount، category، description، date، و user_id.
2. كتابة النموذج (Schema):
ابدأ بتعريف الجداول والعلاقات:
حدد الـ primary keys (المفاتيح الأساسية).
أضف العلاقة one-to-many بين المستخدم والمصاريف.
3. التجهيز للـ Migrations:
إذا كنت تستخدم Prisma أو Sequelize، جهّز أوامر التهجير (migrations) علشان إنشاء الجداول.
هدف اليوم:
تكون خلصت الـ Schema وبدأت تشغيل قاعدة البيانات.
جرب تعمل اتصال بين التطبيق وقاعدة البيانات، واتأكد إن الاتصال شغال.
تفكير اليوم:
هل العلاقة بين الجداول واضحة؟
هل عندك تصور كامل عن الـ fields المطلوبة لكل جدول؟


اليوم الثالث: بناء المستخدمين والمصادقة (Authentication)
1. إنشاء مسارات المستخدمين:
ابدأ بإنشاء endpoint لتسجيل المستخدمين (sign up).
فكّر في إضافة تسجيل الدخول (login) للتحقق من البريد وكلمة المرور.
2. إعداد JWT:
استخدم JWT لإنشاء tokens عند تسجيل الدخول.
أضف middleware للتحقق من صلاحية الـ token لكل الطلبات المحمية.
3. التحقق من البيانات:
استخدم validation libraries (زي Joi أو express-validator) لضمان إدخال بيانات صحيحة عند التسجيل.
هدف اليوم:
انتهي من نظام المصادقة (Authentication System).
اختبر الـ endpoints باستخدام أدوات زي Postman أو Thunder Client.
تفكير اليوم:
هل الـ tokens آمنة بما فيه الكفاية؟
هل الفاليديشن يغطي كل السيناريوهات؟


الأيام التالية:
اليوم الرابع: إضافة CRUD للمصاريف (Create, Read, Update, Delete).
اليوم الخامس: إنشاء الفلاتر (Filter Expenses).
اليوم السادس: مراجعة الكود وتحسين الأداء.
اليوم السابع: كتابة اختبارات (Unit Tests) وتوثيق الـ API.